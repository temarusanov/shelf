import { Controller, <% if (type.name === 'command') { %>Post, Body<% } else {%>Get, Query<% } %> } from "@nestjs/common";
import { ApiTags } from '@nestjs/swagger'
import { FeaturesBus } from '@shelfjs/features'
import { createZodDto, ZodResponse } from 'nestjs-zod'

import { 
    <%= name.className %>Feature, 
    <%= name.className %>FeatureInputSchema, 
    <%= name.className %>FeatureOutputSchema,
    <%= name.className %>FeatureResponse,
} from './<%= name.fileName %>.feature'

class <%= name.className %>Input extends createZodDto(<%= name.className %>FeatureInputSchema) {}

class <%= name.className %>Output extends createZodDto(<%= name.className %>FeatureOutputSchema) {}

@Controller()
export class <%= name.className %>Controller {
    
    constructor(private bus: FeaturesBus) {}

    <% if (type.name === 'query') { %>
      @Get('<%= name.fileName %>')
      @ApiTags('API')
      @ZodResponse({ type: <%= name.className %>Output })
      async <%= name.propertyName %>(@Query() input: <%= name.className %>Input) {
          return await this.bus.execute<<%= name.className %>Feature, <%= name.className %>FeatureResponse>(
              new <%= name.className %>Feature(input),
          )
      }
    <% } else { %>
        @Post('<%= name.fileName %>')
        @ApiTags('API')
        @ZodResponse({ type: <%= name.className %>Output })
        async <%= name.propertyName %>(@Body() input: <%= name.className %>Input) {
            return await this.bus.execute<<%= name.className %>Feature, <%= name.className %>FeatureResponse>(
                new <%= name.className %>Feature(input),
            )
        }
    <% } %>
}
