import { <%= type.className %>Bus } from '@nestjs/cqrs'
import {
    Args,
    Field,
    ID,
    InputType,
    <% if (type.name === 'query') { %>ObjectType,<% } %>
    <% if (type.name === 'command') { %>Mutation<% } else {%>Query<% } %>,
    Resolver,
} from '@nestjs/graphql'

import { <%= name.className %><%= type.className %>, <%= name.className %><%= type.className %>Response } from './<%= name.fileName %>.<%= type.fileName %>'


@InputType()
export class  <%= name.className %>Input {
    @Field(() => ID)
    userId: string
}

<% if (type.name === 'query') { %>
@ObjectType()
export class  <%= name.className %>Type {
    @Field(() => ID)
    id: string
}

<% } %>
@Resolver()
export class  <%= name.className %>Resolver {
    constructor(private <%= type.fileName %>Bus: <%= type.className %>Bus) {}

    <% if (type.name === 'query') { %>
      @Query(() => <%= name.className %>Type)
      async <%= name.propertyName %>(@Args('input') input: <%= name.className %>Input): Promise<<%= name.className %>Type> {
          return await this.<%= type.fileName %>Bus.execute<<%= name.className %><%= type.className %>, <%= name.className %><%= type.className %>Response>(
              new <%= name.className %><%= type.className %>(input),
          )
      }
    <% } else { %>
      @Mutation(() => Boolean)
        async <%= name.propertyName %>(@Args('input') input: <%= name.className %>Input): Promise<boolean> {
            await this.<%= type.fileName %>Bus.execute<<%= name.className %><%= type.className %>, <%= name.className %><%= type.className %>Response>(
                new <%= name.className %><%= type.className %>(input),
            )

            return true
        }
    <% } %>
}
